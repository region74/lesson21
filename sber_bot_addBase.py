import re
import datetime
import telebot
import random
import math
import sqlite3
from telebot import types

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
TOKEN = '******************'
bot = telebot.TeleBot(TOKEN)
balans = 3388.50  # —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å, –ø–æ–∫–∞ –Ω–µ—Ç API —Å–±–µ—Ä–∞

reg = '^[-+]?[0-9]*[.]?[0-9]+(?:[eE][-+]?[0-9]+)?$'  # —Ä–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞

conn = sqlite3.connect('**************', check_same_thread=False)  # —Å–æ–µ–¥–∏–Ω—è–µ–º —Å –±–¥
cursor = conn.cursor()


def db_balance_val(money: int):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –±–∞–ª–∞–Ω—Å–∞
    cursor.execute('INSERT INTO balance (money) VALUES (?)', [money])
    conn.commit()


def db_prihod_val(money: int):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–∏—Ö–æ–¥–∞
    cursor.execute('INSERT INTO prihod (number) VALUES (?)', [money])
    conn.commit()


def db_rashod_val(money: int):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞
    cursor.execute('INSERT INTO rashod (number) VALUES (?)', [money])
    conn.commit()


def db_ras_val(money: int, date: datetime):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞ —Å –¥–∞—Ç–æ–π
    cursor.execute('INSERT INTO rashod_date (number, date) VALUES (?,?)', [money, date])
    conn.commit()


def db_pri_val(money: int, date: datetime):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–∏—Ö–æ–¥–∞ —Å –¥–∞—Ç–æ–π
    cursor.execute('INSERT INTO prihod_date (number, date) VALUES (?,?)', [money, date])
    conn.commit()


def db_ras_get():  # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ –ë–î —Å –¥–∞—Ç–æ–π
    cursor.execute('SELECT number,date from rashod_date')
    rows = cursor.fetchall()
    l = []
    for row in rows:
        part1 = str(row[0])
        part2 = str(row[1])
        part2 = part2[:-7]
        part3 = part1 + ' —Ä—É–±.   ' + part2
        l.append(part3)
    conn.commit()
    str_a = ' \n'.join(map(str, l)) + '\n'
    return str_a


def db_pri_get():  # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –ø—Ä–∏—Ö–æ–¥–æ–≤ –∏–∑ –ë–î —Å –¥–∞—Ç–æ–π
    cursor.execute('SELECT number,date from prihod_date')
    rows = cursor.fetchall()
    l = []
    for row in rows:
        part1 = str(row[0])
        part2 = str(row[1])
        part2 = part2[:-7]
        part3 = part1 + ' —Ä—É–±.   ' + part2
        l.append(part3)
    conn.commit()
    str_a = ' \n'.join(map(str, l)) + '\n'
    return str_a


def db_balance_get():  # —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –ë–î
    global balans
    a = cursor.execute('SELECT money from balance where + id= (select max(id) from balance)').fetchone()
    conn.commit()
    balans = float(a[0])

    return


def db_rashod_get():  # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ –ë–î
    cursor.execute('SELECT number from rashod')
    rows = cursor.fetchall()
    l = []
    for row in rows:
        for x in row:
            l.append(x)
    conn.commit()
    str_a = ' —Ä—É–±.\n'.join(map(str, l)) + ' —Ä—É–±.'
    return str_a


def db_prihod_get():  # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏–∑ –ë–î
    cursor.execute('SELECT number from prihod')
    rows = cursor.fetchall()
    l = []
    for row in rows:
        for x in row:
            l.append(x)
    conn.commit()
    str_a = ' —Ä—É–±.\n'.join(map(str, l)) + ' —Ä—É–±.'
    return str_a


# –ö–æ–º–∞–Ω–¥–∞ start
@bot.message_handler(commands=["start"])
def start(m, res=False):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ üí∞‚úÖ")
    item2 = types.KeyboardButton("–†–∞—Å—Ö–æ–¥—ã üí∏‚ùå")
    item3 = types.KeyboardButton("–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å üëÄ")
    item4 = types.KeyboardButton("–í—ã–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ üìù")
    item5 = types.KeyboardButton("–í—ã–ø–∏—Å–∫–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π üìù")
    item6 = types.KeyboardButton("–î–∞—Ç—ã —Ä–∞—Å—Ö–æ–¥–æ–≤")
    item7 = types.KeyboardButton("–î–∞—Ç—ã –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π")
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)
    markup.add(item4)
    markup.add(item5)
    markup.add(item6)
    markup.add(item7)
    bot.send_message(m.chat.id, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=markup)


@bot.message_handler(content_types=["text"])
def handler_text(message):
    if message.text.strip() == '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ üí∞‚úÖ':
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å—É–º–º—É:')
        bot.register_next_step_handler(sent, inpay)
    elif message.text.strip() == '–†–∞—Å—Ö–æ–¥—ã üí∏‚ùå':
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å—É–º–º—É:')
        bot.register_next_step_handler(sent, outpay)
    elif message.text.strip() == '–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å üëÄ':
        db_balance_get()  # –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ –±–¥
        bot.send_message(message.chat.id, f'{balans:.2f} —Ä—É–±–ª–µ–π.')
        # db_balance_val(money=balans)
    elif message.text.strip() == '–í—ã–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ üìù':
        bot.send_message(message.chat.id, db_rashod_get())
    elif message.text.strip() == '–í—ã–ø–∏—Å–∫–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π üìù':
        bot.send_message(message.chat.id, db_prihod_get())
    elif message.text.strip() == '–î–∞—Ç—ã —Ä–∞—Å—Ö–æ–¥–æ–≤':
        bot.send_message(message.chat.id, db_ras_get())
        # sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å—É–º–º—É:')
        # bot.register_next_step_handler(sent, outpay2)
    elif message.text.strip() == '–î–∞—Ç—ã –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π':
        bot.send_message(message.chat.id, db_pri_get())
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.')


def inpay(message):  # —Ä–∞—Å—á–µ—Ç –ø—Ä–∏—Ö–æ–¥–æ–≤
    global balans
    text = message.text
    if text == '–†–∞—Å—Ö–æ–¥—ã üí∏‚ùå':
        bot.send_message(message.chat.id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤:')
        bot.register_next_step_handler(message, outpay)
        return
    elif text == '–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å üëÄ':
        bot.send_message(message.chat.id, f'{balans:.2f} —Ä—É–±–ª–µ–π.')
        # db_balance_val(money=balans)
        return
    elif text == '–í—ã–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ üìù':
        bot.send_message(message.chat.id, db_rashod_get())
        return
    elif text == '–í—ã–ø–∏—Å–∫–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π üìù':
        bot.send_message(message.chat.id, db_prihod_get())
        return
    elif text == '–î–∞—Ç—ã —Ä–∞—Å—Ö–æ–¥–æ–≤':
        bot.send_message(message.chat.id, db_ras_get())
        return
    elif text == '–î–∞—Ç—ã –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π':
        bot.send_message(message.chat.id, db_pri_get())
        return
    # if not text[0].isdigit() and text[1].isdigit():
    if re.match(reg, text) is None:
        msg = bot.send_message(message.chat.id,
                               '‚ùóÔ∏è–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º –∏–ª–∏ –¥—Ä–æ–±–Ω—ã–º —á–∏—Å–ª–æ–º —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥: ‚ùóÔ∏è')
        bot.register_next_step_handler(msg, inpay)  # askSource
        return
    a = float(message.text)
    d = datetime.datetime.now()
    db_pri_val(money=a, date=d)  # –∑–∞–ø–∏—Å—å –ø—Ä–∏—Ö–æ–¥–∞ —Å –¥–∞—Ç–æ–π –≤ –±–¥
    db_prihod_val(money=a)  # –∑–∞–ø–∏—Å—å –ø—Ä–∏—Ö–æ–¥–∞ –≤ –±–¥
    if a > 100000000:
        bot.send_message(message.chat.id, '–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è —Ç—ã –ø—Ä–µ—É–≤–µ–ª–∏—á–∏–≤–∞–µ—à—åü§î\n–ü–æ–≤—Ç–æ—Ä–∏ –≤–≤–æ–¥:')
        # bot.send_message(message.caht.id,'–ü–æ–≤—Ç–æ—Ä–∏ –≤–≤–æ–¥:')
        bot.register_next_step_handler(message, inpay)
        return
    b = balans
    c = a + b
    balans = c
    bot.send_message(message.chat.id, '–ù–∞ –∫–∞—Ä—Ç—É –ø–æ—Å—Ç—É–ø–∏–ª–æ: {k} —Ä—É–±–ª–µ–π.'.format(k=message.text))
    bot.send_message(message.chat.id, f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {c:.2f} —Ä—É–±–ª–µ–π.')
    db_balance_val(money=balans)


def outpay2(message):  # –ø—Ä–æ–±–Ω–∞—è –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞ —Å –¥–∞—Ç–æ–π
    text = message.text
    a = float(message.text)
    b = datetime.datetime.now()
    db_ras_val(money=a, date=b)


def outpay(message):  # —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤
    global balans
    text = message.text
    if text == '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ üí∞‚úÖ':
        bot.send_message(message.chat.id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:')
        bot.register_next_step_handler(message, inpay)
        return
    elif text == '–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å üëÄ':
        bot.send_message(message.chat.id, f'{balans:.2f} —Ä—É–±–ª–µ–π.')
        # db_balance_val(money=balans)
        return
    elif text == '–í—ã–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ üìù':
        bot.send_message(message.chat.id, db_rashod_get())
        return
    elif text == '–í—ã–ø–∏—Å–∫–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π üìù':
        bot.send_message(message.chat.id, db_prihod_get())
        return
    elif text == '–î–∞—Ç—ã —Ä–∞—Å—Ö–æ–¥–æ–≤':
        bot.send_message(message.chat.id, db_ras_get())
        return
    elif text == '–î–∞—Ç—ã –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π':
        bot.send_message(message.chat.id, db_pri_get())
        return
    # if not text.isdigit(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ —Ü–∏—Ñ—Ä—ã
    if re.match(reg, text) is None:
        msg = bot.send_message(message.chat.id,
                               '‚ùóÔ∏è–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º –∏–ª–∏ –¥—Ä–æ–±–Ω—ã–º —á–∏—Å–ª–æ–º —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥: ‚ùóÔ∏è')
        bot.register_next_step_handler(msg, outpay)  # askSource
        return
    a = float(message.text)
    d = datetime.datetime.now()
    db_ras_val(money=a, date=d)  # –∑–∞–ø–∏—Å—å –≤ –ë–î —Å –¥–∞—Ç–æ–π
    db_rashod_val(money=a)  # –∑–∞–ø–∏—Å—å —Ä–∞—Å—Ö–æ–¥–∞ –≤ –±–¥ –±–µ–∑ –¥–∞—Ç—ã
    b = balans
    c = b - a
    if c < 0:
        bot.send_message(message.chat.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è.')
        return
    balans = c
    bot.send_message(message.chat.id, '–° –∫–∞—Ä—Ç—ã —Å–ø–∏—Å–∞–Ω–æ: {k} —Ä—É–±–ª–µ–π.'.format(k=message.text))
    bot.send_message(message.chat.id, f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {c:.2f} —Ä—É–±–ª–µ–π.')
    db_balance_val(money=balans)


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling(none_stop=True, interval=0)  # —á—Ç–æ–±—ã –æ–∂–∏–¥–∞–ª –≤–≤–æ–¥–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
